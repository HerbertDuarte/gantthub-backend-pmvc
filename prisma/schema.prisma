generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UsuarioPrisma {
  id                 String                 @id @default(uuid())
  nome               String
  email              String                 @unique
  situacao           Int                    @default(1)
  login              String                 @unique
  role               Int                    @default(1)
  refreshToken       String?
  senha              String
  imageUrl           String?
  createdAt          DateTime               @default(now()) @db.Timestamptz(3)
  tarefas            TarefaPrisma[]
  projetos           ProjetoPrisma[]
  subTarefas         SubTarefaPrisma[]
  usuariosProjetos   UsuarioProjetoPrisma[]
  UsuarioSetorPrisma UsuarioSetorPrisma[]

  @@map("usuarios")
}

model ProjetoPrisma {
  id        String        @id @default(uuid())
  nome      String
  descricao String?
  marcos    MarcoPrisma[]

  createdBy        UsuarioPrisma          @relation(fields: [createdById], references: [id])
  createdById      String
  createdAt        DateTime               @default(now()) @db.Timestamptz(3)
  usuariosProjetos UsuarioProjetoPrisma[]
  projetoSetor     ProjetoSetorPrisma[]
  usuarioSetor     UsuarioSetorPrisma[]

  @@map("projetos")
}

model MarcoPrisma {
  id        String         @id @default(uuid())
  nome      String
  tarefas   TarefaPrisma[]
  createdAt DateTime       @default(now()) @db.Timestamptz(3)

  projeto   ProjetoPrisma @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  projetoId String

  @@map("marcos")
}

model TarefaPrisma {
  id            String   @id @default(uuid())
  nome          String
  descricao     String
  dataInicio    DateTime
  dataFim       DateTime
  status        Int
  createdAt     DateTime @default(now()) @db.Timestamptz(3)
  justificativa String?

  usuario   UsuarioPrisma @relation(fields: [usuarioId], references: [id])
  usuarioId String

  marco      MarcoPrisma       @relation(fields: [marcoId], references: [id], onDelete: Cascade)
  marcoId    String
  subTarefas SubTarefaPrisma[]

  @@map("tarefas")
}

model SubTarefaPrisma {
  id            String   @id @default(uuid())
  nome          String
  descricao     String
  dataInicio    DateTime
  dataFim       DateTime
  status        Int
  createdAt     DateTime @default(now()) @db.Timestamptz(3)
  justificativa String?

  usuario   UsuarioPrisma @relation(fields: [usuarioId], references: [id])
  usuarioId String

  tarefaPai   TarefaPrisma @relation(fields: [tarefaPaiId], references: [id], onDelete: Cascade)
  tarefaPaiId String

  @@map("sub_tarefas")
}

model UsuarioProjetoPrisma {
  projetoId String
  usuarioId String
  createdAt DateTime @default(now()) @db.Timestamptz(3)

  projeto ProjetoPrisma @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  usuario UsuarioPrisma @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@id([projetoId, usuarioId])
  @@map("usuario_projeto")
}

model SetorPrisma {
  setorId      String               @id @default(uuid())
  nome         String
  cor          String
  projetoSetor ProjetoSetorPrisma[]

  @@map("setores")
}

model ProjetoSetorPrisma {
  setorId   String
  projetoId String

  setor   SetorPrisma   @relation(fields: [setorId], references: [setorId])
  projeto ProjetoPrisma @relation(fields: [projetoId], references: [id])

  @@id([setorId, projetoId])
  @@map("projeto_setor")
}

model UsuarioSetorPrisma {
  usuarioId String
  projetoId String

  usuario UsuarioPrisma @relation(fields: [usuarioId], references: [id])
  projeto ProjetoPrisma @relation(fields: [projetoId], references: [id])

  @@id([usuarioId, projetoId])
  @@map("projeto_usuario")
}
