generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UsuarioPrisma {
  id           String   @id @default(uuid())
  nome         String
  email        String   @unique
  situacao     Int      @default(1)
  login        String   @unique
  refreshToken String?
  senha        String
  imageUrl     String?
  createdAt    DateTime @default(now()) @db.Timestamptz(3)

  UsuarioTarefa  UsuarioTarefaPrisma[]
  UsuarioProjeto UsuarioProjetoPrisma[]

  @@map("usuarios")
}

model ProjetoPrisma {
  id        String        @id @default(uuid())
  nome      String
  descricao String?
  marcos    MarcoPrisma[]

  createdAt        DateTime               @default(now()) @db.Timestamptz(3)
  usuariosProjetos UsuarioProjetoPrisma[]

  @@map("projetos")
}

model MarcoPrisma {
  id      String         @id @default(uuid())
  nome    String
  tarefas TarefaPrisma[]

  projeto   ProjetoPrisma @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  projetoId String

  @@map("marcos")
}

model TarefaPrisma {
  id         String   @id @default(uuid())
  nome       String
  descricao  String
  dataInicio DateTime
  dataFim    DateTime
  status     Int

  createdAt DateTime @default(now()) @db.Timestamptz(3)

  marco   MarcoPrisma @relation(fields: [marcoId], references: [id], onDelete: Cascade)
  marcoId String

  usuariosTarefas UsuarioTarefaPrisma[]
  checkLists      CheckListPrisma[]

  @@map("tarefas")
}

model CheckListPrisma {
  id        String   @id @default(uuid())
  nome      String
  createdAt DateTime @default(now()) @db.Timestamptz(3)

  tarefa     TarefaPrisma      @relation(fields: [tarefaId], references: [id], onDelete: Cascade)
  tarefaId   String
  checkItems CheckItemPrisma[]

  @@map("checkList")
}

model CheckItemPrisma {
  id        String   @default(uuid())
  nome      String
  checked   Boolean
  createdAt DateTime @default(now()) @db.Timestamptz(3)

  checkList   CheckListPrisma @relation(fields: [checkListId], references: [id], onDelete: Cascade)
  checkListId String

  @@id([checkListId, id])
  @@map("checkItem")
}

model UsuarioTarefaPrisma {
  usuario   UsuarioPrisma @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  tarefa    TarefaPrisma  @relation(fields: [tarefaId], references: [id], onDelete: Cascade)
  usuarioId String
  tarefaId  String

  @@id([usuarioId, tarefaId])
  @@map("usuarioTarefa")
}

model UsuarioProjetoPrisma {
  usuario     UsuarioPrisma @relation(fields: [usuarioId], references: [id])
  projeto     ProjetoPrisma @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  tipoVinculo Int
  usuarioId   String
  projetoId   String

  @@id([usuarioId, projetoId])
  @@map("usuarioProjeto")
}
